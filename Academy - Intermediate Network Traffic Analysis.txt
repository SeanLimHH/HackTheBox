Key ideas that will be explored in this module:

1. Attacks on the Link Layer
2. Attacks on the IP Layer
3. Attacks on the Transport Layer
4. Attacks on the Network Layer

Goal is detection in this module.

Some topics covered here will be logs analysis, Indicators of Compromise (IoCs).



ARP
We will study ARP first as the notes point out that many attackers typically
launch many attacks from ARP.

It is the first protocol that should be scrutinised also because the attacks here
are harder to detect due to untargeted nature of it. So it does not aim a target,
but more of a broadcast. Hence it is harder to identify.

Steps: Host A needs to send data to Host B
(From Host A's perspective)
1. Figure out Host B's physical address (MAC)
2. Lookup the ARP cache. This consists a list of known addresses.
Reason for lookup is to see if B's MAC address exists there. If so, no need to do
the following steps. It will simply jump to step 5.
3. (Not in ARP cache): Host A broadcasts an ARP request to all machines in the subnet.
3a. B will pick out this request; as its physical address is in the ARP request itself.
3b. B will then respond to this request; it sends back to host A with an ARP reply.
3c. The ARP reply will contain the mapping; of host B's IP address and MAC address.
4. The ARP reply is sent from host B to host A.
5. Host A updates his own ARP cache with the details of the mapping received.


ARP spoofing or ARP poisoning
From the above's process, we can clearly see that it is possible for an attacker to act
as a host B and reply to host A.

Solutions
1. Use predefined mappings
    Manually configure the ARP mappings. So you can have no need to consult the ARP table.
    This means preventing automatic changes. Make changes only possible via manual changes

2. Restrict access to switches and routers via port security
    Restrict the access of ports in the switches and routers. Only ensure that admins can
    access it.



tcpdump
This is a tool to capture all packets and traffic.

Basic usage: Capturing all packets live. eth0 is NIC
'sudo tcpdump -i eth0 -w outputFileOfCapture.pcapng'

To specifically capture only ARP:
'sudo tcpdump -i eth0 -w outputFileOfCapture.pcapng arp'



Opening .pcapng files
Use Wireshark

In this notes, i am provided a sample ARP spoofing .pcapng file

If you observe many requests or replies being sent from a device
within a short time frame, the device is suspicious.

opcode functionality in Wireshark enables filtering:
1. arp.opcode == 1 represents all types of ARP requests
2. arp.opcode == 2 represents all types of ARP replies

As we proceed to click on an entry:
We see for a subsequent reply-request in the example, a yellow information box:
Duplicate IP address detected for 192.168.10.4 (50:eb:f6:ec:0e:7f) - also in use by 08:00:27:53:0c:ba (frame 25)
This message suggests that an IP address is mapped to two different MAC addresses.
Wireshark figures this out by comparing the source and destination host IP and MAC
addresses.

To filter out duplicate records: use filter
arp.duplicate-address-detected && arp.opcode == 2

Solution to this: how to figure out?
Determine the discrepancy devices' initial (first) IP address.
Because devices can change their MAC address.

Using a wireshark filter: (arp.opcode) && ((eth.src == <MAC address>) || (eth.dst == <MAC address>)).
Then, observe the first entry of the broadcast.
Under ARP (request), we can see the fields Sender MAC address and Sender IP address.
We have to use these two fields, interpret them. This is done by realising that these two are mapped initially.

Next, we have two other fields in it: target IP address and target MAC address.
So mentally we have this MAC address mapped to this IP address.
Then, the target MAC address is localhost (00:00:00_00:00:00)
and the new target IP is something else.
This is a clear sign that the attacker changed his own IP address to a new one.


Another indicator: consistently dropping TCP connections
This suggests that the attacker is not forwarding traffic to the router.
In Wireshark, this is shown as: [TCP Retransmission]



ARP scanning and Denial-of-Service
IoCs of ARP scanning:
1. Requests sent to sequential IP addresses
2. Requests sent to non-existent hosts
3. A sudden unusual volume of ARP traffic 

Here, an example file provided showcased in the info section in wireshark - increasing number
for the IP address.

In fact, nmap will perform such sequential scans.

What is the goal of ARP scanning?
An attacker may do this to get a list of live hosts.
Then, he may alter his strategy to deny service to all these live hosts.
Or, the attacker can try to poison everyone's ARP cache.
This is a strategy for a MitM attack.

Some possible follow-ups to such actions:
1. Tracing and identification. Locate and stop the activities of the malicious host.
2. Containment: It may also be wise to disconnect or isolate the area at the switch or router level.




802.11 Denial of Service
A link-layer attack that is prominent is one aimed at 802.11 which is the WiFi.

To examine the WiFi traffic, we would need a WIDS or WIPS system or a wireless interface capable of
monitor mode. Monitor mode allows viewing of raw 802.11 frames and other packet types that might
otherwise remain hidden.

To view information of our wireless network interfaces in Linux: iwconfig

Few methods to enable monitor mode:

1. aircrack-ng
The `airmon-ng` command is used to set a wireless interface (e.g., wlan0) into monitor mode.

2. system utilities
Call in sequence (bring down the wireless card => make it monitor mode => bring it back up):

sudo ifconfig wlan0 down
sudo iwconfig wlan0 mode monitor
sudo ifconfig wlan0 up

You can then verify whether the network interface is indeed in monitor mode using `iwconfig`

To commence capturing - use aircrack-ng:
You need 3 parameters:
1. -c
This is the Access Point's channel you want to monitor

An access point (AP) channel refers to a specific radio frequency on which the wireless
network operates.

In Wi-Fi networks, APs can broadcast their signals over multiple channels within the 2.4 GHz
or 5 GHz frequency bands.

2. --bssid
This is a unique identifier assigned to each AP or wireless router.

3. -w <outputFileName>
This is to write the results to an output file.


Deauthentication Attacks / Dissociation attack
Idea:
The attacker sends deauthentication frames to one or more clients.
These deauthentication frames basically will disconnect the clients from the network.
These deauthentication frames appear to originate from the legitimate access point.

Then, when the client attempts to reconnect: the attack shall sniff the packets and crack it offline.

How it is performed:
Spoof the MAC address of the sender.

To prevent:
Have control tools like IEEE 802.11w (Management Frame Protection)

Detection of potential deauthentication attacks
In the notes we are provided a sample packet.
To limit view to only from AP's BSSID: use `wlan.bssid == xx:xx:xx:xx:xx:xx`

To view deauthentication frames from our BSSID or an attacker pretending to send these from our BSSID:
(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12)
fc.type represents the frame management type == 0; and fc.type_subtype represents the subtype.
For deauthentication, the subtype is 12.

One IoC is massive amount of deauthentication frames sent to one client. (sign of DoS attack)
Another IoC is that in each of the frame, we see the same reason code.

A sophisticated attacker will change the reason code as he attacks.

Some measures to take are:
1. Enable IEEE 802.11w (Management Frame Protection) if possible
2. Utilise WPA3-SAE
3. Modify WIPS / WIDS detection rules.




Rogue Access Point and Evil Twin

Rogue Access Point is an access point illegally set up to bait people to connect to it (Wi-Fi), then
steal data from users.

An example could be someone setting up a personal wireless router in a company's cubicle
This creates a possible rogue access point where hackers can exploit to gain access to the network


Evil Twin is a copy of the actual wireless access point with spoofed mimicked SSID.
Intention is to trick people into connecting to it instead of the actual access point

Filter in wireshark that we could use: (wlan.fc.type == 00) and (wlan.fc.type_subtype == 8)

Beacon frames
This are frames (type of packets) that is periodically emitted by Wireless Access Points to announce
its existence.
The filter above filters out beacon frames of the sort:
https://semfionetworks.com/wp-content/uploads/2021/04/wireshark_802.11_filters_-_reference_sheet.pdf

Beacon analysis is useful in determining actual and fake access points.

A clear indicator: RSN is a type of security protocol used in Wi-Fi networks.
We can see if the network we connect to lack this; it could be a telltale sign of an evil twin.
Under tagged parameters in Wireshark, we observe Robust Security Network (RSN)

If such a situation occurs; by inspecting the identity of the device: we can apply a filter to observe
all victims: wlan.bssid == <MAC of device>



Fragmentation Attacks

This refers to exploitation of vulnerabilities of the way fragmented packets are handled by network devices.
Here, the focus is on IP layer.
The IP layer does not have mechanisms to detect packet loss, drops or tampering.

This is the reason why attackers tend to prey on this layer; malforming packets.

Concept of fragmentation and its abuse
Its purpose is to split large data sizes into smaller packets to be sent over the web.
The packets are then reassembled upon delivery.

MTU is used to determine the maximum payload size for a single packet.
Different protocols may have different MTUs. 

Some common strategies of attackers:
1. Fragmentation of scanning techniques.
If the IDS or IPS does not simulate reassembly of packets to detect the purpose of the packet, an attacker
can perform scans in fragments, hence possibly bypassing firewall controls.
This method can bypass a poorly configured firewall as well.

2. Flooding with very small MTU
This can tax system resources where the attacker hopes that the network does not reassemble the packets

3. Denial of Service with very large MTU (exceeding 65535 bytes)
65535 bytes is the max size of an IP packet including its headers.

A strategy to prevent the above:
1. Complete the reassembly of packets and inspecting it before proceeding.


Display of enumeration of nmap: From defender's POV.
1	0.000000	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=1/256, ttl=64 (reply in 2)
2	0.000248	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=1/256, ttl=64 (request in 1)
3	1.028667	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=2/512, ttl=64 (reply in 4)
4	1.028890	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=2/512, ttl=64 (request in 3)
5	2.040772	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=3/768, ttl=64 (reply in 6)
6	2.041033	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=3/768, ttl=64 (request in 5)
7	3.068466	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=4/1024, ttl=64 (reply in 8)
8	3.068835	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=4/1024, ttl=64 (request in 7)
9	4.093264	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=5/1280, ttl=64 (reply in 10)
10	4.093507	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=5/1280, ttl=64 (request in 9)
11	5.114179	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=6/1536, ttl=64 (reply in 12)
12	5.114402	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=6/1536, ttl=64 (request in 11)
13	6.143716	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=7/1792, ttl=64 (reply in 14)
14	6.144008	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=7/1792, ttl=64 (request in 13)
15	7.165677	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=8/2048, ttl=64 (reply in 16)
16	7.165943	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=8/2048, ttl=64 (request in 15)
17	8.196883	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=9/2304, ttl=64 (reply in 18)
18	8.197163	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=9/2304, ttl=64 (request in 17)
19	9.208388	192.168.10.5	192.168.10.1	ICMP	98	Echo (ping) request  id=0xa07b, seq=10/2560, ttl=64 (reply in 20)
20	9.208615	192.168.10.1	192.168.10.5	ICMP	98	Echo (ping) reply    id=0xa07b, seq=10/2560, ttl=64 (request in 19)

An attacker may fragment: nmap -f 10 <defender's IP>: defender's POV:
23	23.527435	192.168.10.5	0.0.0.10	ICMP	60	Echo (ping) request  id=0xc6bb, seq=0/0, ttl=58 (no response found!)
24	23.527467	192.168.10.5	0.0.0.10	IPv4	60	Fragmented IP protocol (proto=TCP 6, off=0, ID=9cc1) [Reassembled in #26]
25	23.527473	192.168.10.5	0.0.0.10	IPv4	60	Fragmented IP protocol (proto=TCP 6, off=8, ID=9cc1) [Reassembled in #26]
26	23.527484	192.168.10.5	0.0.0.10	TCP	60	47494 → 443 [SYN] Seq=0 Win=1024 Len=0 MSS=1460
27	23.527498	192.168.10.5	0.0.0.10	IPv4	60	Fragmented IP protocol (proto=TCP 6, off=0, ID=19b5) [Reassembled in #29]
28	23.527506	192.168.10.5	0.0.0.10	IPv4	60	Fragmented IP protocol (proto=TCP 6, off=8, ID=19b5) [Reassembled in #29]
29	23.527510	192.168.10.5	0.0.0.10	TCP	60	47494 → 80 [ACK] Seq=1 Ack=1 Win=1024 Len=0

We can observe the fragments above. The more fragments, the more suspicious.

Some other indicators mentioned: many ports on the defender's machine are visited in a short span of time; and some of the ports
being closed.

To view packets with TCP RST flag set to 1: tcp.flags.reset==1




IP Source and Destination Spoofing

When observing IPv4 and IPv6 traffic, the source IP should always come from our subnet.

Note that IP packets can be crafted; hence it is not so straightforward to immediately detect them.

Some attacks:
1. DDoS with changed source address
2. Changed-source of packets (goal is to bypass firewalls)
3. SMURF attacks
4. LAND attacks

SMURF attacks are done in the following way:

1. The attacker will send an ICMP request to live hosts with a spoofed address of the victim host
2. The live hosts will respond to the legitimate victim host with an ICMP reply
3. This may cause resource exhaustion on the victim host

An indicator is many ICMP requests. Sometimes attackers combine it with fragmentation

LAND attacks are done with the idea to block all ports:

1. Spoof the source and destination IP addresses to be the same
2. If all ports are occupied, real connections are more difficult to establish with the affected host.



IP Time-to-Live attacks
This is not really an attack; more of a means of evading detection. Just as the packet is about to expire,
the attacker catches the packet before it reaches the firewalls, IDS, IPS ...

This is done by setting a very small TTL. So the packet expires fast

One solution is to discard or filter out very small TTLs



TCP handshake abnormalities
For TCP connection:
1. Client sends TCP SYN-flagged request.
    Synchronised flag is set; desire to connect
2. If port is open and connectable, other client sends back a TCP SYN-ACK-flagged reply.
    Acknowledges and reserves some resources for the connection
3. Then client sends a TCP ACK-flagged request to mark the start of connection
    Is like a receipt. Completion of three-way handshake


Some abnormalies:
1. One host to many ports
2. One host to many hosts
3. Many and or unusual flags in packets
4. No flags (NULL scan)

For example: in an nmap scan, you will send a SYN-marked packet. For nmap scans, you will
send many separate packets to many different ports.

It will show up many [SYN] info in the packets in wireshark.
Two primary scans that shows up SYN - SYN stealth scans and SYN scans

For a NULL scan, the TCP connections behave as follows:
1. If port is open: system does not respond - simply because there are no flags!
2. If port is closed: system responds with an RST packet.

Another example: Too many [ACK] scans

In the case of an ACK scan TCP connections behave as follows:
1. If a port is open: system does not respond OR responds with RST-flagged packet
2. If a port is closed: system responds with an RST-flagged packet


Another indicator: Too many [FIN] scans

The TCP packets marked with FIN flag - marks termination of TCP connection.
Such an attack is called a FIN flood attack. The idea is to flood the TCP/IP stack.

In the case of a FIN scan, our machine will behave as follows:
1. If a port is open: system does not respond
2. If a port is closed: system responds with an RST-flagged packet 

Lastly, another indicator is too many flags. This is known as an Xmas tree scan.
Similarly, in the case of such a scan, our machine will behave as follows:
1. If a port is open: system does not respond or with an RST-flagged packet
2. If a port is closed: system responds with an RST-flagged packet.




TCP Connection Resets and Hijacks

Notice that connections can be terminated as discussed above by an attacker.
It can also be hijacked.

A TCP connection termination attack is known as a TCP RST packet injection attack.

Such an attack is conducted in this manner:
1. Change the attacker's own packet's source IP address to the victim's IP address.
2. Change TCP packet to contain RST flagged set to true.
3. Include valid sequence numbers in the forged packets.
Sequence numbers ensure proper sequencing of TCP segments.
4. Change the destination address and port to the desired target machine hosting the service.
The port should be chosen to hold services that the attacker wishes to deny from the victim
5. The target machine holding the service that we wish to deny from a victim machine will interpret
it as a disconnection, hence terminating the connection.
Examples: Port 80 for HTTP, port 443 for HTTPS, port 21 for FTP

From a defender's standpoint, if you see a lot of packets sent to one port, it is suspicious.




TCP Connection Hijacking
The idea here is that the attacker actively monitors the target connection that they wish to hijack.

Then the attack predicts the sequence numbers, and performs the same steps as the above, spoofing the
source IP address to the victim's.
Once a 3-way handshake reaches the 2nd way, the attacker acts as the victim, sending the last ACK packet
to the server with the service. This is to make information appear legitimately from the victim.

The attacker will have to, at the same time, block ACK packets from being sent from the victim's computer to the machine
with the service.

At this stage, the attacker can sent fake commands over to the server, whilst acting like it came from the victim
themselves.

Side note on Telnet: characters are sent one by one, as seen in Wireshark
