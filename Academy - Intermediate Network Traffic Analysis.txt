Key ideas that will be explored in this module:

1. Attacks on the Link Layer
2. Attacks on the IP Layer
3. Attacks on the Transport Layer
4. Attacks on the Network Layer

Goal is detection in this module.

Some topics covered here will be logs analysis, Indicators of Compromise (IoCs).



ARP
We will study ARP first as the notes point out that many attackers typically
launch many attacks from ARP.

It is the first protocol that should be scrutinised also because the attacks here
are harder to detect due to untargeted nature of it. So it does not aim a target,
but more of a broadcast. Hence it is harder to identify.

Steps: Host A needs to send data to Host B
(From Host A's perspective)
1. Figure out Host B's physical address (MAC)
2. Lookup the ARP cache. This consists a list of known addresses.
Reason for lookup is to see if B's MAC address exists there. If so, no need to do
the following steps. It will simply jump to step 5.
3. (Not in ARP cache): Host A broadcasts an ARP request to all machines in the subnet.
3a. B will pick out this request; as its physical address is in the ARP request itself.
3b. B will then respond to this request; it sends back to host A with an ARP reply.
3c. The ARP reply will contain the mapping; of host B's IP address and MAC address.
4. The ARP reply is sent from host B to host A.
5. Host A updates his own ARP cache with the details of the mapping received.


ARP spoofing or ARP poisoning
From the above's process, we can clearly see that it is possible for an attacker to act
as a host B and reply to host A.

Solutions
1. Use predefined mappings
    Manually configure the ARP mappings. So you can have no need to consult the ARP table.
    This means preventing automatic changes. Make changes only possible via manual changes

2. Restrict access to switches and routers via port security
    Restrict the access of ports in the switches and routers. Only ensure that admins can
    access it.



tcpdump
This is a tool to capture all packets and traffic.

Basic usage: Capturing all packets live. eth0 is NIC
'sudo tcpdump -i eth0 -w outputFileOfCapture.pcapng'

To specifically capture only ARP:
'sudo tcpdump -i eth0 -w outputFileOfCapture.pcapng arp'



Opening .pcapng files
Use Wireshark

In this notes, i am provided a sample ARP spoofing .pcapng file

If you observe many requests or replies being sent from a device
within a short time frame, the device is suspicious.

opcode functionality in Wireshark enables filtering:
1. arp.opcode == 1 represents all types of ARP requests
2. arp.opcode == 2 represents all types of ARP replies

As we proceed to click on an entry:
We see for a subsequent reply-request in the example, a yellow information box:
Duplicate IP address detected for 192.168.10.4 (50:eb:f6:ec:0e:7f) - also in use by 08:00:27:53:0c:ba (frame 25)
This message suggests that an IP address is mapped to two different MAC addresses.
Wireshark figures this out by comparing the source and destination host IP and MAC
addresses.

To filter out duplicate records: use filter
arp.duplicate-address-detected && arp.opcode == 2

Solution to this: how to figure out?
Determine the discrepancy devices' initial (first) IP address.
Because devices can change their MAC address.

Using a wireshark filter: (arp.opcode) && ((eth.src == <MAC address>) || (eth.dst == <MAC address>)).
Then, observe the first entry of the broadcast.
Under ARP (request), we can see the fields Sender MAC address and Sender IP address.
We have to use these two fields, interpret them. This is done by realising that these two are mapped initially.

Next, we have two other fields in it: target IP address and target MAC address.
So mentally we have this MAC address mapped to this IP address.
Then, the target MAC address is localhost (00:00:00_00:00:00)
and the new target IP is something else.
This is a clear sign that the attacker changed his own IP address to a new one.


Another indicator: consistently dropping TCP connections
This suggests that the attacker is not forwarding traffic to the router.
In Wireshark, this is shown as: [TCP Retransmission]



ARP scanning and Denial-of-Service
IoCs of ARP scanning:
1. Requests sent to sequential IP addresses
2. Requests sent to non-existent hosts
3. A sudden unusual volume of ARP traffic 

Here, an example file provided showcased in the info section in wireshark - increasing number
for the IP address.

In fact, nmap will perform such sequential scans.

What is the goal of ARP scanning?
An attacker may do this to get a list of live hosts.
Then, he may alter his strategy to deny service to all these live hosts.
Or, the attacker can try to poison everyone's ARP cache.
This is a strategy for a MitM attack.

Some possible follow-ups to such actions:
1. Tracing and identification. Locate and stop the activities of the malicious host.
2. Containment: It may also be wise to disconnect or isolate the area at the switch or router level.




802.11 Denial of Service
A link-layer attack that is prominent is one aimed at 802.11 which is the WiFi.

To examine the WiFi traffic, we would need a WIDS or WIPS system or a wireless interface capable of
monitor mode. Monitor mode allows viewing of raw 802.11 frames and other packet types that might
otherwise remain hidden.

To view information of our wireless network interfaces in Linux: iwconfig

Few methods to enable monitor mode:

1. aircrack-ng
The `airmon-ng` command is used to set a wireless interface (e.g., wlan0) into monitor mode.

2. system utilities
Call in sequence (bring down the wireless card => make it monitor mode => bring it back up):

sudo ifconfig wlan0 down
sudo iwconfig wlan0 mode monitor
sudo ifconfig wlan0 up

You can then verify whether the network interface is indeed in monitor mode using `iwconfig`

To commence capturing - use aircrack-ng:
You need 3 parameters:
1. -c
This is the Access Point's channel you want to monitor

An access point (AP) channel refers to a specific radio frequency on which the wireless
network operates.

In Wi-Fi networks, APs can broadcast their signals over multiple channels within the 2.4 GHz
or 5 GHz frequency bands.

2. --bssid
This is a unique identifier assigned to each AP or wireless router.

3. -w <outputFileName>
This is to write the results to an output file.


Deauthentication Attacks / Dissociation attack
Idea:
The attacker sends deauthentication frames to one or more clients.
These deauthentication frames basically will disconnect the clients from the network.
These deauthentication frames appear to originate from the legitimate access point.

Then, when the client attempts to reconnect: the attack shall sniff the packets and crack it offline.

How it is performed:
Spoof the MAC address of the sender.

To prevent:
Have control tools like IEEE 802.11w (Management Frame Protection)

Detection of potential deauthentication attacks
In the notes we are provided a sample packet.
To limit view to only from AP's BSSID: use `wlan.bssid == xx:xx:xx:xx:xx:xx`

To view deauthentication frames from our BSSID or an attacker pretending to send these from our BSSID:
(wlan.bssid == xx:xx:xx:xx:xx:xx) and (wlan.fc.type == 00) and (wlan.fc.type_subtype == 12)
fc.type represents the frame management type == 0; and fc.type_subtype represents the subtype.
For deauthentication, the subtype is 12.

One IoC is massive amount of deauthentication frames sent to one client. (sign of DoS attack)
Another IoC is that in each of the frame, we see the same reason code.

A sophisticated attacker will change the reason code as he attacks.

Some measures to take are:
1. Enable IEEE 802.11w (Management Frame Protection) if possible
2. Utilise WPA3-SAE
3. Modify WIPS / WIDS detection rules.
