Metasploit is Ruby-based.
Idea is that you can write, test and execute code (exploits)
Also, you can take exploits (code) from existing databases written for existing
vulnerabilities via Metasploit.

Metasploit has two parts of its product - Pro and Framework.
Differences are features. Pro version has its own console as well.

We typically interface with the Metasploit framework via the console: msfconsole.
It is the only way you can access most of the features within Metasploit. So it is
good to be familiar with it.

All the base files relating to the framework are in /usr/share/metasploit-framework

So we can find modules in /usr/share/metasploit-framework/modules,
plugins in /usr/share/metasploit-framework/plugins,
scripts in /usr/share/metasploit-framework/scripts,
tools in /usr/share/metasploit-framework/tools

----------------------------------------------------------------------------------------
We start the interaction with the framework via "msfconsole"

The concept to begin running an exploit also follows outside using the framework: enumeration first.
In fact, the workflow of using the framework mirrors that of the approach without using
the framework

This engagement structure in Metasploit's framework is composed of five parts:
1. Enumeration
2. Preparation
3. Exploitation
4. Privilege Escalation
5. Post-Exploitation

Knowing the above by heart enables us to quickly dive into which features of MSF that
we wish to use. So it is wise to be very clear on which section we are doing at any given
moment.

Metasploit modules are prepared scripts. In the real world, many times these scripts may not work.
The reason being is that each target hosts may have a different set of implementations that may
render a particular module ineffective.

It is thus useful to think of metasploit as a supplementary tool, a helper.

If we type show all in the msfconsole, we will see a list of modules.

The way metasploit modules are structured are via folders.

The folder structure has a meaning: <No.> <type>/<os>/<service>/<name>

Each module has its own index as well. 



First tag <type>
This represents what kind of general goal the code will accomplish

One of the many types is "payload".
For such a type, it is special in the sense that the syntax is "use <no.>"
Then, only the following modules can be interactable (called initiators) with this type:
1. Auxiliary
    Helper functionality; admin capabilities. Sniffing, fuzzing...
2. Exploits
    Modules that exploit a chosen vulnerability
3. Post
    These are modules that gather more information



Second tag <os>
Different OS has different architectures. Different modules may work only for some OS not all.


Third tag <service>
This service refers to the service on the vulnerable machine.
For some modules, this service tag can refer to more general activity; scanning...


Last tag <name>
This refers to the name of the exploit; short-description.



Since there are so many modules. Let us say you have a module you want to use in mind.
Then use "search <module name>"
We can specify the search. For example, module type = "exploit", we can run command:
search <exploit name> type:exploit

Some useful search parameters:
cve:year
platform:<os>
type:<auxiliary/exploit/post>
rank:<rank>
<pattern>


The general workflow:
1. Enumeration: we scan for open ports and running services on the ports.
Here, if we run nmap in msfconsole, we can already see the vulnerabilities after scan.

We can also use other tools like searchsploit here.
After we discover a vulnerability, we should focus on the identifier of the vulnerability

Then run "search <vulnerability name / identifier>"
We will see a list of possible modules (scripts) to be used.

To use, we run "use <script number of output list>"
If the exploit requires some parameters to be set, here they will ask you.
(It will appear that "Required" = yes in one column)
You can see via show options.

Some parameters: RHOST or RHOSTS.
This stands for Remote Host or Hosts. You should set it to the IP address(es)
of the vulnerable machine or machines:
set RHOST <IP address>
You should also set the Local host and ports if necessary. LHOST

If you run setg instead of set above, you make the options selected permanent
until restart.

Then once done, call "run" to run the exploit.
It should transit you to inside a shell for example, for an exploit that gives shell access.
Then you can just proceed from here.


Regarding exploits: each has its own OS target. or service type. or anything custom.
The types can be predefined by the module owner
We can see the targets after selecting a module.

After selecting the exploit, we can call "info" to get more information regarding
the exploit. It is actually good practice to call "info" before running the exploit.

This is so that we know the effects of the exploit on the system.

Then after selecting the module "show targets" will display all the possible OS versions
that the exploit is intended for.

If we know the OS version of our target, we can change it to target that: set target <index number>


To identify correctly a target:
1. Obtain a copy of the target binaries
2. Use msfpescan to locate a suitable return address



Payloads in Metasploit
Payloads are the action to delivering an exploit. Like a verb for the noun exploit.

These are modules that aid exploit modules in (typically) returning a shell to the attacker (you)
Payloads typically are bundled with the exploit.
Then, they will usually include some sort of establishing a reverse connection to the attacker.

Once a connection to the target's computer shell is established, we can say that we established a
foothold in the target's computer.

There are three types of payload modules in the Metasploit framework: Singles, Stagers and Stages.
A module can have a mixture of these three payload modules.

Singles
A single payload contains everything required for the exploit. In a way, they are self-contained.

Stages
A staged payload is an exploitation process.
Typically modularised and functionally separate.
They work in chains (chaining the attacks).
Stage 0: Shellcode is sent to target machine's vulnerable service. Only purpose is to initialise
a connection to the attacker's machine. Also known as reverse connection.

Stagers
Stagers work with staged payloads to do certain tasks.
They wait on the attacker's machine, ready to establish a connection to the victim host once
the stage completes its run on the remote host.
Generally used to set up network connection between attacker and victim.


Reverse connections
Often less likely to trigger prevention systems compared to direct connections:
1. It is a legitimate software behaviour
2. They appear as outbound connections (made from the victim's computer, so more trust)


Meterpreter Payloads
A Meterpreter payload is part of Metasploit framework.
Designed to be interactive shell-like environment on target machine.

Uses DLL injection - Dynamic Link Library code injected into the address space of a running
process.
Injection of code into the address space of a running process introduces additional functionality
or modifications into that process while it is actively running. 
Generally, this enables changing the entire functionality of the service running to an attacker's
liking.

Meterpreter payloads Meterpreter resides completely in the RAM of the remote host and leaves no
traces on the hard drive, making it very difficult to detect with conventional forensic techniques.
Furthermore, it is persistent across reboots or system changes. So in effect they are powerful.


We can list payloads via "show payloads".
We can observe that there are too many to choose from, so we need to know which one to pick.
Also, we can create our own payloads - using msfvenom.

Typically we use grep with "show payloads" : "grep <payload name> show payloads"

Then call "set payload <payload number>"

And "show options"

Then "run"

For Meterpreter, you will get shell access but it is a Meterpreter prompt.
So it is different from a Windows command-line. Type "help" for more information.

You can open a shell via Meterpreter: "shell".
At this point, you will observe, by the stager, "Channel 1 created".
This channel was created by the Meterpreter stager activated on our machine to await
a connection request initialised (by the staged payload) by our victim's machine.

There are many payload types. Popular ones by penetration testers are Empire and Cobalt
Strike payloads.


Encoders
Mainly used to avoid antivirus detection and or other security controls that uses
signature-based matching.
This was in the past. Nowadays, many IPS and IDS manufacturers have found very good ways
to deal with this method.

There was traditionally a very popular encoder that significantly evaded a lot of detection:
Shikata Ga Nai, which translates to "It cannot be helped" or "Nothing can be done about it,"
abbreviated as SGN encoding. However, in recent times, this trend is about to change.

General idea of why it was so effective at evading antivirus signature-based matching:

A lot of randomness in the payloads and even the processes themselves.

The randomness extends to the arrangement and substitution of instructions.
This made signature-based matching not very effective. Because each payload looks different
from the past.


Metasploit has many of its own payloads and encoders: "msfpayloads" and "msfencode"

Creation of custom payload involves doing so via msfpayloads then piping to msfencode

After 2015, metasploit combined both into msfvenom: it does both.

The idea of encoding a payload before delivering it is to avoid antivirus detection.



Databases in Metasploit
These are used to keep track of your results.
Uses PostgreSQL

We must thus first ensure that outside MSF, we are running PostgreSQL service:
sudo service postgresql status

then start it:
sudo systemctl start postgresql

At this point, the database service is running.
Then we can initialise with msf:
sudo msfdb init
I had to drop the sudo for my case

After which, we will need to connect to this database:
sudo msfdb run

For any issues faced, we can re-initialise the database:
msfdb reinit

This does however, remove all existing data.

If we are inside the msfconsole, we can run "help database" to see all associated
commands with the database.

Using the database:
Workspaces
These are like folders in a project.
In msfconsole: type "workspace" to show the workspaces.
-a: add; -d: delete:
workspace -a <new_workspace>
workspace -d <existing_workspace>
To switch to a workspace:
workspace <workspace_to_switch_to>

workspace -h shows all options


How to save data of nmap results?: Use db_nmap inside metasploit instead of "nmap"
so example is db_nmap -sV -p- <IP address> instead of nmap -sV -p- <IP address>

Then we would run afterwards db_export -f <format> for backing up the results.

Querying for results:
Use the metasploit console:

hosts
This shows all the hosts stored in the database of the scans.

services
This behaves the same as hosts - shows all the services with descriptions of the scans.

creds
This enables you to visualise the credentials gathered during your interactions with the host.



Plugins in metasploit
All plugins are stored in /usr/share/metasploit-framework/plugins

To load, we call "load <plugin_name>"

If you want to import a plugin or set of plugins from an external source: idea is to
copy and paste to the plugins folder.

It should be Ruby files with extension .rb


Sessions
These are like control interfaces for your modules.
These are connections established with the target machine only after a successful 
exploit or brute force attack.

To start a session: sessions -i 1
To view existing sessions: sessions

In Metasploit, jobs are known as background processes. Also encompasses non-background tasks
We can run an exploit in the background: exploit -j

To list all jobs: jobs -l

